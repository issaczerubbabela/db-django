version: '3.8'

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: automation_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build: ./backend
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DB_NAME=automation_db
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=db
      - DB_PORT=5432
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate --settings=automation_db.settings_production &&
             python manage.py collectstatic --noinput --settings=automation_db.settings_production &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 120 automation_db.wsgi:application"

  fastapi:
    build: ./backend
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DB_NAME=automation_db
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=db
      - DB_PORT=5432
    volumes:
      - ./backend:/app
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
    command: uvicorn fastapi_app:app --host 0.0.0.0 --port 8001 --workers 2

  frontend:
    build: ./frontend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8001}
      - NEXT_PUBLIC_DJANGO_URL=${NEXT_PUBLIC_DJANGO_URL:-http://localhost:8000}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - fastapi

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - backend_static:/var/www/static
      - backend_media:/var/www/media
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - fastapi

volumes:
  postgres_data:
  backend_static:
  backend_media:
